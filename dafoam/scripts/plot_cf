#!/usr/bin/env python

import pandas as pd
import yaml
import sys
from myplotstyle import AcademicPlot

def show_yaml_example():
    print("YAML配置文件示例:")
    print("""
transform:
  U0: 5.4
  nu: 1.5e-5

files:
  - path: "path/to/your/rawfile1.raw"
    label: "case1"
    skiprows: 1
    type: "line" # 可选，默认为 'line'
    marker: "o" # 可选
    markerevery: 100 # 可选
    
  - path: "path/to/your/rawfile2.raw"
    label: "case2"
    skiprows: 1
    type: "scatter" # 可选，默认为 'line'
    marker: "x" # 可选
    markerevery: 100 # 可选

exp_files: # (可选)
  - path: "path/to/your/experiment_file.raw"
    label: "Experiment"
    skiprows: 1
    type: "scatter" # 可选，默认为 'line'
    marker: "+" # 可选

plot:
  title: "Plot Title"
  xlabel: "X Axis Label"
  ylabel: "Y Axis Label"
  xlim: [xmin, xmax] # (可选)
  ylim: [ymin, ymax] # (可选)
  figsize: [12, 6]

""")


def read_config(config_file):
    with open(config_file, 'r') as file:
        config = yaml.safe_load(file)
    return config

def read_data(file_path, skiprows):
    # 读取RAW文件
    data = pd.read_csv(file_path, delim_whitespace=True, skiprows=skiprows,header=None)
    data['x'] = data.iloc[:, 0]  # 根据规则计算横坐标
    data['y'] = data.iloc[:, 1]  # 根据规则计算纵坐标
    return data

def read_and_transform_data(file_path, transform_config,skiprows):
    # 读取RAW文件
    data = pd.read_csv(file_path, delim_whitespace=True, skiprows=skiprows,header=None)

    # 应用转换规则
    U0 = transform_config['U0']
    nu = transform_config['nu']
    data['x'] = U0 * data.iloc[:, 0] / nu  
    
    # 如果y>0，取y=2*y/U0^2,否则取y=-2*y/U0^2
    data['y'] = data.iloc[:, 3].apply(lambda y: 2 * y / (U0 * U0) if y > 0 else -2 * y / (U0 * U0))
    
    return data

def plot_data(academic_plot, data, label, marker=None, plot_type='line',markevery=None):
    x = data['x'].to_numpy()
    y = data['y'].to_numpy()
    
    # 绘图
    if plot_type == 'line':
        academic_plot.plot_line(x, y, label=label, marker=marker,markevery=markevery)
    elif plot_type == 'scatter':
        academic_plot.plot_scatter(x, y, label=label, marker=marker)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python script.py <config.yml>")
        show_yaml_example()
        sys.exit(1)

    config_file = sys.argv[1]
    config = read_config(config_file)

    my_plot = AcademicPlot(figsize=config['plot'].get('figsize', (10, 6)))
    
    for file_config in config['files']:
        skiprows = file_config.get('skiprows', 0)
        data = read_and_transform_data(file_config['path'], config['transform'], skiprows)
        plot_data(my_plot, data, file_config.get('label', 'Data'), marker=file_config.get('marker', None),markevery=file_config.get("markevery",None),plot_type=file_config.get('type', 'line'))
    
    if 'exp_files' in config:
        for file_config in config['exp_files']:
            skiprows = file_config.get('skiprows', 0)
            data = read_data(file_config['path'], skiprows)
            plot_data(my_plot, data, file_config.get('label', 'Experiment'), marker=file_config.get('marker', None),markevery=file_config.get("markevery",None),plot_type=file_config.get('type', 'scatter'))

    my_plot.set_labels(title=config['plot'].get('title', 'Data Plot'),
                       xlabel=config['plot'].get('xlabel', ''),
                       ylabel=config['plot'].get('ylabel', ''))
    
    xlim = config['plot'].get('xlim')
    if xlim:
        my_plot.ax.set_xlim(xlim[0], xlim[1])

    ylim = config['plot'].get('ylim')
    if ylim:
        my_plot.ax.set_ylim(ylim[0], ylim[1])

    my_plot.show()
    my_plot.save("cf.png")