#!/usr/bin/env python

import pyvista as pv
import numpy as np
import yaml
import sys
from scipy.interpolate import griddata
from myplotstyle import AcademicPlot

def read_config(config_file):
    with open(config_file, 'r') as file:
        config = yaml.safe_load(file)
    return config

def show_yaml_example():
    print("示例文件配置：")
    print("""
    vtkFilePath: 'path/to/vtk/gamma.vtk'
    field: 'gamma'
    plot:
        title: 'Gamma Distribution in XY Plane'
        xlabel: 'X'
        ylabel: 'Y'
        colorMap: 'jet'
        xlim: [0, 3]    # 可选
        ylim: [0, 0.01]    # 可选
        resolution:
            x: 400
            y: 200
        savePath: 'gamma.png'
    transform(optional):
        enable: True
        x: 0.5
    """)

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("请提供配置文件！")
        show_yaml_example()
        print("Usage: python script.py <config.yml>")
        sys.exit(1)

    config_file = sys.argv[1]
    config = read_config(config_file)

    # 读取VTK文件
    print("正在读取VTK文件...")
    mesh = pv.read(config['vtkFilePath'])

    # 获取单元格中心点坐标
    print("获取单元格中心点坐标...")
    cell_centers = mesh.cell_centers()

    # 提取XY平面的数据
    print("提取XY平面的数据...")
    points = np.c_[cell_centers.points[:, 0], cell_centers.points[:, 1]]
    values = cell_centers[config['field']]

    # 获取网格分辨率
    resolution_x = config['plot']['resolution']['x']
    resolution_y = config['plot']['resolution']['y']

    # 创建网格用于插值
    grid_x, grid_y = np.meshgrid(np.linspace(points[:,0].min(), points[:,0].max(), resolution_x),
                                 np.linspace(points[:,1].min(), points[:,1].max(), resolution_y))

    # 数据插值
    grid_values = griddata(points, values, (grid_x, grid_y), method='cubic')

    # 使用 AcademicPlot 创建图表
    plot = AcademicPlot(figsize=(8, 6))
    plot.set_labels(title=config['plot']['title'], xlabel=config['plot']['xlabel'], ylabel=config['plot']['ylabel'])
    
    # 绘制云图
    plot.plot_contour(grid_x, grid_y, grid_values, cmap=config['plot']['colorMap'], colorbar_label=config['field'])

    # 如开启了转换，添加特定的参考线
    if config.get('transform') and config['transform']['enable']:
        plot.ax.axvline(x=config["transform"]["x"], color='black', linestyle='--')

    # 设置坐标轴范围
    xlim = config['plot'].get('xlim')
    if xlim:
        plot.ax.set_xlim(xlim[0], xlim[1])

    ylim = config['plot'].get('ylim')
    if ylim:
        plot.ax.set_ylim(ylim[0], ylim[1])

    # 显示并保存图表
    plot.show()
    plot.save(config['plot']['savePath'])